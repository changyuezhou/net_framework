// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ha.proto

#ifndef PROTOBUF_ha_2eproto__INCLUDED
#define PROTOBUF_ha_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace nsf {
namespace ha {
namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ha_2eproto();
void protobuf_AssignDesc_ha_2eproto();
void protobuf_ShutdownFile_ha_2eproto();

class Request;
class Response;

// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size_p) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string addr = 1;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value_p);
  inline void set_addr(const char* value_p);
  inline void set_addr(const char* value_p, size_t size_p);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  inline void set_allocated_addr(::std::string* addr_p);

  // @@protoc_insertion_point(class_scope:nsf.ha.pb.Request)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* addr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ha_2eproto();
  friend void protobuf_AssignDesc_ha_2eproto();
  friend void protobuf_ShutdownFile_ha_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size_p) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string addr = 1;
  inline int addr_size() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 1;
  inline const ::std::string& addr(int index) const;
  inline ::std::string* mutable_addr(int index);
  inline void set_addr(int index, const ::std::string& value_p);
  inline void set_addr(int index, const char* value_p);
  inline void set_addr(int index, const char* value_p, size_t size_p);
  inline ::std::string* add_addr();
  inline void add_addr(const ::std::string& value_p);
  inline void add_addr(const char* value_p);
  inline void add_addr(const char* value_p, size_t size_p);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& addr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_addr();

  // @@protoc_insertion_point(class_scope:nsf.ha.pb.Response)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> addr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ha_2eproto();
  friend void protobuf_AssignDesc_ha_2eproto();
  friend void protobuf_ShutdownFile_ha_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// optional string addr = 1;
inline bool Request::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_addr() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& Request::addr() const {
  return *addr_;
}
inline void Request::set_addr(const ::std::string& value_p) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value_p);
}
inline void Request::set_addr(const char* value_p) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value_p);
}
inline void Request::set_addr(const char* value_p, size_t size_p) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value_p), size_p);
}
inline ::std::string* Request::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  return addr_;
}
inline ::std::string* Request::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_addr(::std::string* addr_p) {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (addr_p) {
    set_has_addr();
    addr_ = addr_p;
  } else {
    clear_has_addr();
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Response

// repeated string addr = 1;
inline int Response::addr_size() const {
  return addr_.size();
}
inline void Response::clear_addr() {
  addr_.Clear();
}
inline const ::std::string& Response::addr(int index) const {
  return addr_.Get(index);
}
inline ::std::string* Response::mutable_addr(int index) {
  return addr_.Mutable(index);
}
inline void Response::set_addr(int index, const ::std::string& value_p) {
  addr_.Mutable(index)->assign(value_p);
}
inline void Response::set_addr(int index, const char* value_p) {
  addr_.Mutable(index)->assign(value_p);
}
inline void Response::set_addr(int index, const char* value_p, size_t size_p) {
  addr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value_p), size_p);
}
inline ::std::string* Response::add_addr() {
  return addr_.Add();
}
inline void Response::add_addr(const ::std::string& value_p) {
  addr_.Add()->assign(value_p);
}
inline void Response::add_addr(const char* value_p) {
  addr_.Add()->assign(value_p);
}
inline void Response::add_addr(const char* value_p, size_t size_p) {
  addr_.Add()->assign(reinterpret_cast<const char*>(value_p), size_p);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Response::addr() const {
  return addr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Response::mutable_addr() {
  return &addr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace ha
}  // namespace nsf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ha_2eproto__INCLUDED
